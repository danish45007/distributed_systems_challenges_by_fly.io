2024-02-29 01:25:33,788{GMT}	INFO	[jepsen test runner] jepsen.core: Test version e2e080b710c3c01ab0bafb937986a484d53299ee (plus uncommitted changes)
2024-02-29 01:25:33,789{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w g-counter --bin /Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin --node-count 3 --rate 100 --time-limit 20 --nemesis partition
2024-02-29 01:25:33,861{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 3
 :availability nil
 :max-txn-length 4
 :concurrency 3
 :db
 #object[maelstrom.db$db$reify__16142
         "0x3fe8d57a"
         "maelstrom.db$db$reify__16142@3fe8d57a"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "g-counter"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x674cd2da" "2024-02-29T01:25:33.650+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x686279e0"
         "maelstrom.net$jepsen_net$reify__15251@686279e0"]
 :client
 #object[maelstrom.workload.pn_counter$client$reify__19540
         "0x6b28d4e4"
         "maelstrom.workload.pn_counter$client$reify__19540@6b28d4e4"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x41cfcbb5"
         "java.util.concurrent.CyclicBarrier@41cfcbb5"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 100.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x40941b54"
         "jepsen.checker$compose$reify__11881@40941b54"]
 :argv
 ("test"
  "-w"
  "g-counter"
  "--bin"
  "/Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin"
  "--node-count"
  "3"
  "--rate"
  "100"
  "--time-limit"
  "20"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@3b42d7df"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@1660bba7"]})
 :nodes ["n0" "n1" "n2"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x7d3a9061"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@7d3a9061"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 20000000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.FlipFlop
                                        {:gens [#object[jepsen.nemesis.combined$partition_package$start__16420
                                                        "0x2a2f7a61"
                                                        "jepsen.nemesis.combined$partition_package$start__16420@2a2f7a61"]
                                                ({:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 ...)],
                                         :i 0})})})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x196c8b93"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@196c8b93"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 20000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Filter
                                        {:f #object[maelstrom.workload.g_counter$workload$fn__19599
                                                    "0x307ca947"
                                                    "maelstrom.workload.g_counter$workload$fn__19599@307ca947"],
                                         :gen (jepsen.generator.Mix
                                               {:i 0,
                                                :gens [#object[maelstrom.workload.pn_counter$workload$fn__19572
                                                               "0x61d1315b"
                                                               "maelstrom.workload.pn_counter$workload$fn__19572@61d1315b"]
                                                       ({:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        ...)]})})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x49d5b651"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@49d5b651"],
           :gen ({:type :info, :f :stop-partition, :value nil})})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x34989ceb"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@34989ceb"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x61fb3dae"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x9c88323"
         "maelstrom.net$jepsen_os$reify__15254@9c88323"]
 :time-limit 20
 :workload :g-counter
 :consistency-models [:strict-serializable]
 :topology :grid}

