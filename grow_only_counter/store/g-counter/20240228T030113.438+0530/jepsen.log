2024-02-28 03:01:13,537{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 66d345d7d385283632a03c9ae8beb31c88d78ecf (plus uncommitted changes)
2024-02-28 03:01:13,538{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w g-counter --bin /Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin --node-count 3 --rate 100 --time-limit 20 --nemesis partition
2024-02-28 03:01:13,612{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 3
 :availability nil
 :max-txn-length 4
 :concurrency 3
 :db
 #object[maelstrom.db$db$reify__16142
         "0x3fe8d57a"
         "maelstrom.db$db$reify__16142@3fe8d57a"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "g-counter"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x674cd2da" "2024-02-28T03:01:13.438+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x686279e0"
         "maelstrom.net$jepsen_net$reify__15251@686279e0"]
 :client
 #object[maelstrom.workload.pn_counter$client$reify__19540
         "0x6b28d4e4"
         "maelstrom.workload.pn_counter$client$reify__19540@6b28d4e4"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x41cfcbb5"
         "java.util.concurrent.CyclicBarrier@41cfcbb5"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 100.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x40941b54"
         "jepsen.checker$compose$reify__11881@40941b54"]
 :argv
 ("test"
  "-w"
  "g-counter"
  "--bin"
  "/Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin"
  "--node-count"
  "3"
  "--rate"
  "100"
  "--time-limit"
  "20"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@3b42d7df"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@1660bba7"]})
 :nodes ["n0" "n1" "n2"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x7d3a9061"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@7d3a9061"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 20000000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.FlipFlop
                                        {:gens [#object[jepsen.nemesis.combined$partition_package$start__16420
                                                        "0x2a2f7a61"
                                                        "jepsen.nemesis.combined$partition_package$start__16420@2a2f7a61"]
                                                ({:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 {:type :info,
                                                  :f :stop-partition,
                                                  :value nil}
                                                 ...)],
                                         :i 0})})})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x196c8b93"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@196c8b93"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 20000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Filter
                                        {:f #object[maelstrom.workload.g_counter$workload$fn__19599
                                                    "0x307ca947"
                                                    "maelstrom.workload.g_counter$workload$fn__19599@307ca947"],
                                         :gen (jepsen.generator.Mix
                                               {:i 0,
                                                :gens [#object[maelstrom.workload.pn_counter$workload$fn__19572
                                                               "0x61d1315b"
                                                               "maelstrom.workload.pn_counter$workload$fn__19572@61d1315b"]
                                                       ({:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        {:f :read}
                                                        ...)]})})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x49d5b651"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@49d5b651"],
           :gen ({:type :info, :f :stop-partition, :value nil})})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x34989ceb"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@34989ceb"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x61fb3dae"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x9c88323"
         "maelstrom.net$jepsen_os$reify__15254@9c88323"]
 :time-limit 20
 :workload :g-counter
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-02-28 03:01:15,532{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-02-28 03:01:15,534{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-02-28 03:01:15,537{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-02-28 03:01:15,537{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2024-02-28 03:01:15,537{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-02-28 03:01:15,538{GMT}	INFO	[jepsen node n2] maelstrom.process: launching /Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin []
2024-02-28 03:01:15,538{GMT}	INFO	[jepsen node n1] maelstrom.process: launching /Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin []
2024-02-28 03:01:15,540{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-02-28 03:01:15,542{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-02-28 03:01:15,543{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /Users/danishsharma/go/src/gossip-glamers/grow_only_counter/bin []
2024-02-28 03:01:16,035{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-02-28 03:01:16,053{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2024-02-28 03:01:16,054{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:read	nil
2024-02-28 03:01:16,054{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:majorities-ring
2024-02-28 03:01:16,061{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n0" #{"n2"}, "n2" #{"n1"}, "n1" #{"n0"}}]
2024-02-28 03:01:16,059{GMT}	WARN	[n0 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n0 printed a line to STDOUT which was not well-formed JSON:
localHandler-------------------> n0
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__15856.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:16,076{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:17,081{GMT}	WARN	[n1 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n1 printed a line to STDOUT which was not well-formed JSON:
localHandler-------------------> n1
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__15856.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:18,082{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	0
2024-02-28 03:01:18,082{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:20,085{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	0
2024-02-28 03:01:20,085{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:21,060{GMT}	WARN	[jepsen worker 1] jepsen.generator.interpreter: Process 1 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:21,060{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 0 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:21,062{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2024-02-28 03:01:21,070{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:invoke	:read	nil
2024-02-28 03:01:22,087{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	0
2024-02-28 03:01:22,088{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:add	2
2024-02-28 03:01:22,090{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:add	2
2024-02-28 03:01:22,095{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:22,148{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-02-28 03:01:22,149{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-02-28 03:01:24,099{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	2
2024-02-28 03:01:24,099{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:26,067{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 3 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:26,067{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:read	nil
2024-02-28 03:01:26,074{GMT}	WARN	[jepsen worker 1] jepsen.generator.interpreter: Process 4 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:26,081{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:invoke	:read	nil
2024-02-28 03:01:26,102{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	2
2024-02-28 03:01:26,103{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:add	3
2024-02-28 03:01:26,105{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:add	3
2024-02-28 03:01:26,109{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:add	0
2024-02-28 03:01:26,112{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:add	0
2024-02-28 03:01:26,121{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:28,124{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	5
2024-02-28 03:01:28,125{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:30,128{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	5
2024-02-28 03:01:30,128{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:31,072{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 6 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:31,073{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:invoke	:read	nil
2024-02-28 03:01:31,087{GMT}	WARN	[jepsen worker 1] jepsen.generator.interpreter: Process 7 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:31,091{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:invoke	:read	nil
2024-02-28 03:01:32,131{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	5
2024-02-28 03:01:32,131{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:add	3
2024-02-28 03:01:32,133{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:add	3
2024-02-28 03:01:32,133{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:34,135{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	8
2024-02-28 03:01:34,136{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:add	2
2024-02-28 03:01:34,138{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:add	2
2024-02-28 03:01:34,144{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:add	4
2024-02-28 03:01:34,146{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:add	4
2024-02-28 03:01:34,155{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:36,077{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 9 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:36,094{GMT}	WARN	[jepsen worker 1] jepsen.generator.interpreter: Process 10 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:36,158{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	14
2024-02-28 03:01:36,158{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-02-28 03:01:36,158{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-02-28 03:01:36,159{GMT}	INFO	[jepsen worker nemesis] jepsen.generator.interpreter: Waiting for recovery...
2024-02-28 03:01:46,165{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:invoke	:read	nil
2024-02-28 03:01:46,165{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:read	nil
2024-02-28 03:01:46,165{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:invoke	:read	nil
2024-02-28 03:01:48,168{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:ok	:read	14
2024-02-28 03:01:51,169{GMT}	WARN	[jepsen worker 1] jepsen.generator.interpreter: Process 13 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:51,169{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 12 crashed
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$fn__19529$read__19530.invoke(pn_counter.clj:27)
	at maelstrom.workload.pn_counter$client$reify__19540.invoke_BANG_(pn_counter.clj:50)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-02-28 03:01:51,205{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-02-28 03:01:51,432{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2024-02-28 03:01:51,432{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-02-28 03:01:51,432{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2024-02-28 03:01:53,186{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-02-28 03:01:53,189{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2024-02-28 03:01:53,573{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2024-02-28 03:01:53,596{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Users/danishsharma/go/src/gossip-glamers/grow_only_counter/store/g-counter/20240228T030113.438+0530/results.edn
2024-02-28 03:01:53,762{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true,
              :exceptions ({:count 10,
                            :class clojure.lang.ExceptionInfo,
                            :example #jepsen.history.Op{:index 9,
                                                        :time 5027264188,
                                                        :type :info,
                                                        :process 0,
                                                        :f :read,
                                                        :value nil,
                                                        :exception {:via [{:type clojure.lang.ExceptionInfo,
                                                                           :message "Client read timeout",
                                                                           :data {:type :maelstrom.client/timeout,
                                                                                  :name :timeout,
                                                                                  :definite? false,
                                                                                  :code 0},
                                                                           :at [slingshot.support$stack_trace
                                                                                invoke
                                                                                "support.clj"
                                                                                201]}],
                                                                    :trace [[slingshot.support$stack_trace
                                                                             invoke
                                                                             "support.clj"
                                                                             201]
                                                                            [maelstrom.client$recv_BANG_
                                                                             invokeStatic
                                                                             "client.clj"
                                                                             98]
                                                                            [maelstrom.client$recv_BANG_
                                                                             invoke
                                                                             "client.clj"
                                                                             81]
                                                                            [maelstrom.client$send_PLUS_recv_BANG_
                                                                             invokeStatic
                                                                             "client.clj"
                                                                             123]
                                                                            [maelstrom.client$send_PLUS_recv_BANG_
                                                                             invoke
                                                                             "client.clj"
                                                                             119]
                                                                            [maelstrom.client$rpc_BANG_
                                                                             invokeStatic
                                                                             "client.clj"
                                                                             149]
                                                                            [maelstrom.client$rpc_BANG_
                                                                             invoke
                                                                             "client.clj"
                                                                             140]
                                                                            [maelstrom.workload.pn_counter$fn__19529$read__19530
                                                                             invoke
                                                                             "pn_counter.clj"
                                                                             27]
                                                                            [maelstrom.workload.pn_counter$fn__19529$read__19530
                                                                             invoke
                                                                             "pn_counter.clj"
                                                                             27]
                                                                            [maelstrom.workload.pn_counter$client$reify__19540
                                                                             invoke_BANG_
                                                                             "pn_counter.clj"
                                                                             50]
                                                                            [jepsen.client.Validate
                                                                             invoke_BANG_
                                                                             "client.clj"
                                                                             83]
                                                                            [jepsen.generator.interpreter.ClientWorker
                                                                             invoke_BANG_
                                                                             "interpreter.clj"
                                                                             65]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             140]
                                                                            [jepsen.generator.interpreter$spawn_worker$fn__12908
                                                                             invoke
                                                                             "interpreter.clj"
                                                                             123]
                                                                            [clojure.core$binding_conveyor_fn$fn__5823
                                                                             invoke
                                                                             "core.clj"
                                                                             2047]
                                                                            [clojure.lang.AFn
                                                                             call
                                                                             "AFn.java"
                                                                             18]
                                                                            [java.util.concurrent.FutureTask
                                                                             run
                                                                             "FutureTask.java"
                                                                             317]
                                                                            [java.util.concurrent.ThreadPoolExecutor
                                                                             runWorker
                                                                             "ThreadPoolExecutor.java"
                                                                             1144]
                                                                            [java.util.concurrent.ThreadPoolExecutor$Worker
                                                                             run
                                                                             "ThreadPoolExecutor.java"
                                                                             642]
                                                                            [java.lang.Thread
                                                                             run
                                                                             "Thread.java"
                                                                             1583]],
                                                                    :cause "Client read timeout",
                                                                    :data {:type :maelstrom.client/timeout,
                                                                           :name :timeout,
                                                                           :definite? false,
                                                                           :code 0}},
                                                        :error "indeterminate: Client read timeout"}})},
 :stats {:valid? true,
         :count 27,
         :ok-count 17,
         :fail-count 0,
         :info-count 10,
         :by-f {:add {:valid? true,
                      :count 6,
                      :ok-count 6,
                      :fail-count 0,
                      :info-count 0},
                :read {:valid? true,
                       :count 21,
                       :ok-count 11,
                       :fail-count 0,
                       :info-count 10}}},
 :availability {:valid? true, :ok-fraction 0.6296296},
 :net {:all {:send-count 130,
             :recv-count 125,
             :msg-count 130,
             :msgs-per-op 4.814815},
       :clients {:send-count 50, :recv-count 50, :msg-count 50},
       :servers {:send-count 80,
                 :recv-count 75,
                 :msg-count 80,
                 :msgs-per-op 2.9629629},
       :valid? true},
 :workload {:valid? true,
            :errors nil,
            :final-reads (14),
            :acceptable ([14 14])},
 :valid? true}


Everything looks good! ヽ(‘ー`)ノ
